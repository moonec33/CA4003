/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CCalParser.jj */
/*@egen*//****************************
***** SECTION 1 - OPTIONS *****
****************************/

options { 
	JAVA_UNICODE_ESCAPE = true; 
	DEBUG_PARSER = true;
               
                   
                             
                   
  IGNORE_CASE = true;
    
	}


/*********************************
***** SECTION 2 - USER CODE *****
*********************************/
PARSER_BEGIN(CCalParser)
import java.io.*;
import java.util.*;
    public class CCalParser/*@bgen(jjtree)*/implements CCalParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCCalParserState jjtree = new JJTCCalParserState();

/*@egen*/
        public static SymbolTable symbolTable = new SymbolTable();
        public static String scope = "program";
        public static void main(String args[]) {
            CCalParser parser;
            if (args.length == 0) {
        
           System.out.println("Ccal Parser: Reading from standard input . . .");
            parser = new CCalParser(System.in);
            } else if (args.length == 1) {
                System.out.println("Ccal Parser: Reading from file " + args[0] + " . . .");
                try {
                    parser = new CCalParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                System.out.println("Ccal Parser: File " + args[0] + " not found.");
                return;
            }
            } else {
                System.out.println("Ccal Parser: Usage is one of:");
                System.out.println(" java CCalParser < inputfile");
                System.out.println("OR");
                System.out.println(" java CCalParser inputfile");
                return;
          
            }
            try {
                SimpleNode root = parser.program();

                System.out.println("Abstract Syntax Tree");
                System.out.println("--------------------------------------");
                root.dump("");
                System.out.println();
                System.out.println("Ccal Parser: Ccal program parsed successfully."); 

                // Print Symbol Table

                System.out.println("SYMBOL TABLE");            
                symbolTable.printSymbolTable();


            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Ccal Parser: Encountered errors during parse.");
            }
        }
    }
PARSER_END(CCalParser)


/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/
TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"

}

SKIP : /* COMMENTS */
{
	< "//" (~["\n"])* "\n" >
	| "/*" { commentNesting++; } : IN_COMMENT

}

<IN_COMMENT> SKIP :
{
	"/*" { commentNesting++; }
	| "*/" { commentNesting--;
		if (commentNesting == 0)
			SwitchTo(DEFAULT);
		}
	| <~[]>
}
TOKEN : /* Reserved Words */
{    
  < VARIABLE : "var">
  | < CONSTANT : "const">
  | < RETURN : "return">
  | < INTEGER : "integer">
  | < BOOLEAN : "boolean">
  | < VOID : "void">
  | < MAIN : "main">
  | < IF : "if">
  | < ELSE : "else">
  | < TRUE : "true">
  | < FALSE : "false">
  | < WHILE : "while">
  | < SKIPP : "skip"> 
}

TOKEN : /* Keywords and punctuation */
{    
  < COMMA : ",">
  | < SEMIC : ";">
  | < COLON : ":">
  | < ASSIGN : "=">
  | < LBRACE : "{">
  | < RBRACE : "}">
  | < LBR : "(">
  | < RBR : ")">
  | < PLUS_SIGN : "+">
  | < MINUS_SIGN : "-">
  | < NOT : "~">
  | < OR : "||">
  | < AND : "&&">
  | < EQUALS : "==">
  | < NOT_EQUAL : "!=">
  | < LESS_THAN : "<">
  | < LESS_EQUAL : "<=">
  | < GREATER_THAN : ">">
  | < GREATER_EQUAL : ">=">
}

TOKEN : /* Numbers and identifiers */
{
	 < NUMBER: (<MINUS_SIGN>)?["1"-"9"](<DIGIT>)* | "0">
  | < DIGIT: ["0"-"9"] >
  | < ID : <LETTER>(<LETTER>|<DIGIT>|"_")* >
	| < #LETTER : ["a" - "z", "A" - "Z"]>
	
}
TOKEN : /* Anything not recognised so far */
{
	< OTHER : ~[] >
}



/**************************************************************************
* SECTION 4 - THE GRAMMAR & PRODUCTION RULES - WOULD NORMALLY START HERE *
**************************************************************************/

SimpleNode program()          : {/*@bgen(jjtree) program */
  program jjtn000 = new program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
  try {
/*@egen*/ 
  decl_list() function_list() main() <EOF>/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 
void decl_list() : {}
{
  (decl() <SEMIC> decl_list())?
}
void decl() : {} 
{
  var_decl()
  | const_decl()
} 
void var_decl()      : {/*@bgen(jjtree) Var */
                        Var jjtn000 = new Var(JJTVAR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Var */
   try {
/*@egen*/
   t = <VARIABLE> id = ID() <COLON> type = type()/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ { jjtn000.value = t.image; symbolTable.put(id,type,"var",scope); }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 

}
void const_decl()        : {/*@bgen(jjtree) Const */
                            Const jjtn000 = new Const(JJTCONST);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Const */
   try {
/*@egen*/
   t = <CONSTANT> id = ID() <COLON> type = type() <ASSIGN> Expression()/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/ {jjtn000.value = t.image;   symbolTable.put(id,type,"const",scope);  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 

}
void function_list() : {}
{
  (function() function_list())?
}
void function()           : {/*@bgen(jjtree) Function */
                             Function jjtn000 = new Function(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  type = type()  id = ID() <LBR> parameter_list() <RBR> {symbolTable.put(id,type,"function",scope); scope=id; }
  <LBRACE>
  decl_list()
  statement_block()
  <RETURN> <LBR> (Expression() | {}) <RBR> <SEMIC> 
  <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

String type()       : {/*@bgen(jjtree) Type */
                       Type jjtn000 = new Type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) Type */
   try {
/*@egen*/
   t = <INTEGER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image; return t.image; } 

  |  t = <BOOLEAN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; return t.image; } 

  |  t = <VOID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 

   
}
void parameter_list()  : {}
{
  (nemp_parameter_list())?
}
void nemp_parameter_list()            : {/*@bgen(jjtree) #NemParL(true) */
                                         NemParL jjtn000 = new NemParL(JJTNEMPARL);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) #NemParL(true) */
   try {
/*@egen*/ 
   id = ID() <COLON> type = type() nemp_paramater_list_prime()/*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                               }
/*@egen*/ { symbolTable.put(id,type,"param",scope); }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 

}
void nemp_paramater_list_prime() : {}
{
  (<COMMA> nemp_parameter_list())?
}
void main()       : {/*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
  try {
/*@egen*/
  {scope = "main";}
  <MAIN> 
  <LBRACE>
  decl_list()
  statement_block()
  <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void statement_block() : {}
{
  (statement() statement_block())?
}

void statement()            : {/*@bgen(jjtree) Statement */
                               Statement jjtn000 = new Statement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  ID() statement_ID()
  | <LBRACE> statement_block() <RBRACE> 
  |  t = <IF> condition() <LBRACE> statement_block() <RBRACE> <ELSE> <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
                                                                                                         {
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                         }
/*@egen*/ {jjtn000.value = t.image;}
  |  t = <WHILE> condition() <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                 }
/*@egen*/ {jjtn000.value = t.image;}
  | <SKIPP> <SEMIC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void statement_ID() : {Token t;} 
{
  t = <ASSIGN> Expression() <SEMIC>/*@bgen(jjtree) Assign */
                                     {
                                       Assign jjtn001 = new Assign(JJTASSIGN);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtc001 = false;
                                     }
/*@egen*/  {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
                                     }
/*@egen*/        
  | t =  <LBR> arg_list() <RBR>/*@bgen(jjtree) FuncAssign */
                                {
                                  FuncAssign jjtn002 = new FuncAssign(JJTFUNCASSIGN);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/            
  | {}
}


void Expression() : {}
{
  fragment() (LOOKAHEAD(2) binary_arith_op() fragment())?
}


void binary_arith_op() : {Token t;}
{
   t = <PLUS_SIGN>/*@bgen(jjtree) Plus_op */
                    {
                      Plus_op jjtn001 = new Plus_op(JJTPLUS_OP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/  {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/         
  |  t = <MINUS_SIGN>/*@bgen(jjtree) Minus_op */
                       {
                         Minus_op jjtn002 = new Minus_op(JJTMINUS_OP);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                       }
/*@egen*/  {jjtn002.value = t.image; }/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
                       }
/*@egen*/          
}

void fragment() : {Token t;}
{/*@bgen(jjtree) FuncReturn */
  {
    FuncReturn jjtn001 = new FuncReturn(JJTFUNCRETURN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <ID>  (<LBR> arg_list() <RBR> | {})/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn001, true);
                                             jjtc001 = false;
                                           }
/*@egen*/ {jjtn001.value = t.image; } )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/           
  | t = <MINUS_SIGN> ID()/*@bgen(jjtree) Minus */
                          {
                            Minus jjtn002 = new Minus(JJTMINUS);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                          }
/*@egen*/ {jjtn002.value = t.image; }/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
                          }
/*@egen*/       
  | t = <NUMBER>/*@bgen(jjtree) BoolOp */
                 {
                   BoolOp jjtn003 = new BoolOp(JJTBOOLOP);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                 }
/*@egen*/ {jjtn003.value = t.image; }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/        
  | t = <TRUE>/*@bgen(jjtree) BoolOp */
                {
                  BoolOp jjtn004 = new BoolOp(JJTBOOLOP);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                }
/*@egen*/  {jjtn004.value = t.image; }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
                }
/*@egen*/        
  | t = <FALSE>/*@bgen(jjtree) BoolOp */
                 {
                   BoolOp jjtn005 = new BoolOp(JJTBOOLOP);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
                 }
/*@egen*/  {jjtn005.value = t.image; }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
                 }
/*@egen*/        
  |  <LBR> (Expression() | {}) <RBR> (<LBR> arg_list() <RBR> | {})
}


//Remove Left Recursion  
void condition()           : {/*@bgen(jjtree) Condition */
  Condition jjtn000 = new Condition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  <NOT> condition() condition_prime()
  | LOOKAHEAD(2)(<LBR> condition() <RBR> condition_prime())
  | Expression() comp_op() condition_prime()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void condition_prime() : {Token t;}
{
   t = <AND> condition()/*@bgen(jjtree) AndOp */
                          {
                            AndOp jjtn001 = new AndOp(JJTANDOP);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/  {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/       
  |  t = <OR> condition()/*@bgen(jjtree) OrOp */
                           {
                             OrOp jjtn002 = new OrOp(JJTOROP);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                           }
/*@egen*/  {jjtn002.value = t.image; }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/       
  | {}
}

void comp_op()       : {/*@bgen(jjtree) Comp */
                        Comp jjtn000 = new Comp(JJTCOMP);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Comp */
  try {
/*@egen*/
  t = <EQUALS> Expression()/*@bgen(jjtree) Equals */
                             {
                               Equals jjtn001 = new Equals(JJTEQUALS);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtc001 = false;
                             }
/*@egen*/  {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
                             }
/*@egen*/         
  |  t = <NOT_EQUAL> Expression()/*@bgen(jjtree) NotEquals */
                                   {
                                     NotEquals jjtn002 = new NotEquals(JJTNOTEQUALS);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn002, true);
                                     jjtc002 = false;
                                   }
/*@egen*/  {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                     }
                                   }
/*@egen*/            
  |  t = <LESS_THAN> Expression()/*@bgen(jjtree) LessThan */
                                   {
                                     LessThan jjtn003 = new LessThan(JJTLESSTHAN);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn003, true);
                                     jjtc003 = false;
                                   }
/*@egen*/  {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003, true);
                                     }
                                   }
/*@egen*/           
  |  t = <LESS_EQUAL> Expression()/*@bgen(jjtree) LessEqual */
                                    {
                                      LessEqual jjtn004 = new LessEqual(JJTLESSEQUAL);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn004, true);
                                      jjtc004 = false;
                                    }
/*@egen*/  {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004, true);
                                      }
                                    }
/*@egen*/            
  |  t = <GREATER_THAN> Expression()/*@bgen(jjtree) GreaterThan */
                                      {
                                        GreaterThan jjtn005 = new GreaterThan(JJTGREATERTHAN);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn005, true);
                                        jjtc005 = false;
                                      }
/*@egen*/  {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005, true);
                                        }
                                      }
/*@egen*/              
  |  t = <GREATER_EQUAL> Expression()/*@bgen(jjtree) GreaterEqual */
                                       {
                                         GreaterEqual jjtn006 = new GreaterEqual(JJTGREATEREQUAL);
                                         boolean jjtc006 = true;
                                         jjtree.openNodeScope(jjtn006);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn006, true);
                                         jjtc006 = false;
                                       }
/*@egen*/  {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc006) {
                                           jjtree.closeNodeScope(jjtn006, true);
                                         }
                                       }
/*@egen*/               /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void arg_list()          : {/*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
  try {
/*@egen*/
  (nemp_arg_list() |/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {})/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void nemp_arg_list() : {}
{
  ID() (<COMMA> nemp_arg_list())?
}

String ID()     : {/*@bgen(jjtree) ID */
                   ID jjtn000 = new ID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}