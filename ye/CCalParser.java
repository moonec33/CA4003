/* Generated By:JJTree&JavaCC: Do not edit this line. CCalParser.java */
import java.io.*;
import java.util.*;
    public class CCalParser/*@bgen(jjtree)*/implements CCalParserTreeConstants, CCalParserConstants {/*@bgen(jjtree)*/
  protected static JJTCCalParserState jjtree = new JJTCCalParserState();public static SymbolTable symbolTable = new SymbolTable();
        public static String scope = "program";
        public static void main(String args[]) {
            CCalParser parser;
            if (args.length == 0) {

           System.out.println("Ccal Parser: Reading from standard input . . .");
            parser = new CCalParser(System.in);
            } else if (args.length == 1) {
                System.out.println("Ccal Parser: Reading from file " + args[0] + " . . .");
                try {
                    parser = new CCalParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                System.out.println("Ccal Parser: File " + args[0] + " not found.");
                return;
            }
            } else {
                System.out.println("Ccal Parser: Usage is one of:");
                System.out.println(" java CCalParser < inputfile");
                System.out.println("OR");
                System.out.println(" java CCalParser inputfile");
                return;

            }
            try {
                SimpleNode root = parser.program();

                System.out.println("Abstract Syntax Tree");
                System.out.println("--------------------------------------");
                root.dump("");
                System.out.println();
                System.out.println("Ccal Parser: Ccal program parsed successfully.");

                // Print Symbol Table

                System.out.println("SYMBOL TABLE");
                symbolTable.printSymbolTable();


            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Ccal Parser: Encountered errors during parse.");
            }
        }

/**************************************************************************
* SECTION 4 - THE GRAMMAR & PRODUCTION RULES - WOULD NORMALLY START HERE *
**************************************************************************/
  static final public SimpleNode program() throws ParseException {
    trace_call("program");
    try {
                                 /*@bgen(jjtree) program */
  program jjtn000 = new program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        decl_list();
        function_list();
        main();
        jj_consume_token(0);
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                            {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

  static final public void decl_list() throws ParseException {
    trace_call("decl_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case CONSTANT:
        decl();
        jj_consume_token(SEMIC);
        decl_list();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } finally {
      trace_return("decl_list");
    }
  }

  static final public void decl() throws ParseException {
    trace_call("decl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        var_decl();
        break;
      case CONSTANT:
        const_decl();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("decl");
    }
  }

  static final public void var_decl() throws ParseException {
    trace_call("var_decl");
    try {
                        /*@bgen(jjtree) Var */
                        Var jjtn000 = new Var(JJTVAR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t; String id; String type;
      try {
        t = jj_consume_token(VARIABLE);
        id = ID();
        jj_consume_token(COLON);
        type = type();
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtn000.value = t.image; symbolTable.put(id,type,"var",scope);
      } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("var_decl");
    }
  }

  static final public void const_decl() throws ParseException {
    trace_call("const_decl");
    try {
                            /*@bgen(jjtree) Const */
                            Const jjtn000 = new Const(JJTCONST);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t; String id; String type;
      try {
        t = jj_consume_token(CONSTANT);
        id = ID();
        jj_consume_token(COLON);
        type = type();
        jj_consume_token(ASSIGN);
        Expression();
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                         jjtn000.value = t.image;   symbolTable.put(id,type,"const",scope);
      } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("const_decl");
    }
  }

  static final public void function_list() throws ParseException {
    trace_call("function_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        function();
        function_list();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } finally {
      trace_return("function_list");
    }
  }

  static final public void function() throws ParseException {
    trace_call("function");
    try {
                             /*@bgen(jjtree) Function */
                             Function jjtn000 = new Function(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; String type; String id;
      try {
        type = type();
        id = ID();
        jj_consume_token(LBR);
        parameter_list();
        jj_consume_token(RBR);
                                                         symbolTable.put(id,type,"function",scope); scope=id;
        jj_consume_token(LBRACE);
        decl_list();
        statement_block();
        jj_consume_token(RETURN);
        jj_consume_token(LBR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LBR:
        case MINUS_SIGN:
        case NUMBER:
        case ID:
          Expression();
          break;
        default:
          jj_la1[3] = jj_gen;

        }
        jj_consume_token(RBR);
        jj_consume_token(SEMIC);
        jj_consume_token(RBRACE);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("function");
    }
  }

  static final public String type() throws ParseException {
    trace_call("type");
    try {
                       /*@bgen(jjtree) Type */
                       Type jjtn000 = new Type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image; {if (true) return t.image;}
          break;
        case BOOLEAN:
          t = jj_consume_token(BOOLEAN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; {if (true) return t.image;}
          break;
        case VOID:
          t = jj_consume_token(VOID);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return t.image;}
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

  static final public void parameter_list() throws ParseException {
    trace_call("parameter_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        nemp_parameter_list();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } finally {
      trace_return("parameter_list");
    }
  }

  static final public void nemp_parameter_list() throws ParseException {
    trace_call("nemp_parameter_list");
    try {
                                         /*@bgen(jjtree) #NemParL(true) */
                                         NemParL jjtn000 = new NemParL(JJTNEMPARL);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t; String type; String id;
      try {
        id = ID();
        jj_consume_token(COLON);
        type = type();
        nemp_paramater_list_prime();
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                                 symbolTable.put(id,type,"param",scope);
      } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("nemp_parameter_list");
    }
  }

  static final public void nemp_paramater_list_prime() throws ParseException {
    trace_call("nemp_paramater_list_prime");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        nemp_parameter_list();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } finally {
      trace_return("nemp_paramater_list_prime");
    }
  }

  static final public void main() throws ParseException {
    trace_call("main");
    try {
                     /*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
   scope = "main";
        jj_consume_token(MAIN);
        jj_consume_token(LBRACE);
        decl_list();
        statement_block();
        jj_consume_token(RBRACE);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("main");
    }
  }

  static final public void statement_block() throws ParseException {
    trace_call("statement_block");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SKIPP:
      case LBRACE:
      case ID:
        statement();
        statement_block();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
      trace_return("statement_block");
    }
  }

  static final public void statement() throws ParseException {
    trace_call("statement");
    try {
                               /*@bgen(jjtree) Statement */
                               Statement jjtn000 = new Statement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ID();
          statement_ID();
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
          statement_block();
          jj_consume_token(RBRACE);
          break;
        case IF:
          t = jj_consume_token(IF);
          condition();
          jj_consume_token(LBRACE);
          statement_block();
          jj_consume_token(RBRACE);
          jj_consume_token(ELSE);
          jj_consume_token(LBRACE);
          statement_block();
          jj_consume_token(RBRACE);
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                          jjtn000.value = t.image;
          break;
        case WHILE:
          t = jj_consume_token(WHILE);
          condition();
          jj_consume_token(LBRACE);
          statement_block();
          jj_consume_token(RBRACE);
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                  jjtn000.value = t.image;
          break;
        case SKIPP:
          jj_consume_token(SKIPP);
          jj_consume_token(SEMIC);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("statement");
    }
  }

  static final public void statement_ID() throws ParseException {
    trace_call("statement_ID");
    try {
                       Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        Expression();
        jj_consume_token(SEMIC);
                                       Assign jjtn001 = new Assign(JJTASSIGN);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
        try {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtc001 = false;
                                      jjtn001.value = t.image;
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
        }
        break;
      case LBR:
        t = jj_consume_token(LBR);
        arg_list();
        jj_consume_token(RBR);
                                  FuncAssign jjtn002 = new FuncAssign(JJTFUNCASSIGN);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SEMIC);
        } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
        }
        break;
      default:
        jj_la1[9] = jj_gen;

      }
    } finally {
      trace_return("statement_ID");
    }
  }

  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      fragment();
      if (jj_2_1(2)) {
        binary_arith_op();
        fragment();
      } else {
        ;
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void binary_arith_op() throws ParseException {
    trace_call("binary_arith_op");
    try {
                          Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        t = jj_consume_token(PLUS_SIGN);
                      Plus_op jjtn001 = new Plus_op(JJTPLUS_OP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                     jjtn001.value = t.image;
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
        }
        break;
      case MINUS_SIGN:
        t = jj_consume_token(MINUS_SIGN);
                         Minus_op jjtn002 = new Minus_op(JJTMINUS_OP);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
        try {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                        jjtn002.value = t.image;
        } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("binary_arith_op");
    }
  }

  static final public void fragment() throws ParseException {
    trace_call("fragment");
    try {
                   Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
    FuncReturn jjtn001 = new FuncReturn(JJTFUNCRETURN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          t = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBR:
            jj_consume_token(LBR);
            arg_list();
            jj_consume_token(RBR);
            break;
          default:
            jj_la1[11] = jj_gen;

          }
                                             jjtree.closeNodeScope(jjtn001, true);
                                             jjtc001 = false;
                                            jjtn001.value = t.image;
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
      case MINUS_SIGN:
        t = jj_consume_token(MINUS_SIGN);
        ID();
                            Minus jjtn002 = new Minus(JJTMINUS);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
        try {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                           jjtn002.value = t.image;
        } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
        }
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                   BoolOp jjtn003 = new BoolOp(JJTBOOLOP);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
        try {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                  jjtn003.value = t.image;
        } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
        }
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                  BoolOp jjtn004 = new BoolOp(JJTBOOLOP);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                 jjtn004.value = t.image;
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
        }
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                   BoolOp jjtn005 = new BoolOp(JJTBOOLOP);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
        try {
                   jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
                  jjtn005.value = t.image;
        } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
        }
        break;
      case LBR:
        jj_consume_token(LBR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LBR:
        case MINUS_SIGN:
        case NUMBER:
        case ID:
          Expression();
          break;
        default:
          jj_la1[12] = jj_gen;

        }
        jj_consume_token(RBR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBR:
          jj_consume_token(LBR);
          arg_list();
          jj_consume_token(RBR);
          break;
        default:
          jj_la1[13] = jj_gen;

        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("fragment");
    }
  }

//Remove Left Recursion  
  static final public void condition() throws ParseException {
    trace_call("condition");
    try {
                              /*@bgen(jjtree) Condition */
  Condition jjtn000 = new Condition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          condition();
          condition_prime();
          break;
        default:
          jj_la1[15] = jj_gen;
          if (jj_2_2(2)) {
            jj_consume_token(LBR);
            condition();
            jj_consume_token(RBR);
            condition_prime();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TRUE:
            case FALSE:
            case LBR:
            case MINUS_SIGN:
            case NUMBER:
            case ID:
              Expression();
              comp_op();
              condition_prime();
              break;
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("condition");
    }
  }

  static final public void condition_prime() throws ParseException {
    trace_call("condition_prime");
    try {
                          Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        condition();
                            AndOp jjtn001 = new AndOp(JJTANDOP);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                           jjtn001.value = t.image;
        } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
        }
        break;
      case OR:
        t = jj_consume_token(OR);
        condition();
                             OrOp jjtn002 = new OrOp(JJTOROP);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
        try {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                            jjtn002.value = t.image;
        } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
        }
        break;
      default:
        jj_la1[17] = jj_gen;

      }
    } finally {
      trace_return("condition_prime");
    }
  }

  static final public void comp_op() throws ParseException {
    trace_call("comp_op");
    try {
                        /*@bgen(jjtree) Comp */
                        Comp jjtn000 = new Comp(JJTCOMP);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          t = jj_consume_token(EQUALS);
          Expression();
                               Equals jjtn001 = new Equals(JJTEQUALS);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
          try {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtc001 = false;
                              jjtn001.value = t.image;
          } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
          }
          break;
        case NOT_EQUAL:
          t = jj_consume_token(NOT_EQUAL);
          Expression();
                                     NotEquals jjtn002 = new NotEquals(JJTNOTEQUALS);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
          try {
                                     jjtree.closeNodeScope(jjtn002, true);
                                     jjtc002 = false;
                                    jjtn002.value = t.image;
          } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                     }
          }
          break;
        case LESS_THAN:
          t = jj_consume_token(LESS_THAN);
          Expression();
                                     LessThan jjtn003 = new LessThan(JJTLESSTHAN);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
          try {
                                     jjtree.closeNodeScope(jjtn003, true);
                                     jjtc003 = false;
                                    jjtn003.value = t.image;
          } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003, true);
                                     }
          }
          break;
        case LESS_EQUAL:
          t = jj_consume_token(LESS_EQUAL);
          Expression();
                                      LessEqual jjtn004 = new LessEqual(JJTLESSEQUAL);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
          try {
                                      jjtree.closeNodeScope(jjtn004, true);
                                      jjtc004 = false;
                                     jjtn004.value = t.image;
          } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004, true);
                                      }
          }
          break;
        case GREATER_THAN:
          t = jj_consume_token(GREATER_THAN);
          Expression();
                                        GreaterThan jjtn005 = new GreaterThan(JJTGREATERTHAN);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
          try {
                                        jjtree.closeNodeScope(jjtn005, true);
                                        jjtc005 = false;
                                       jjtn005.value = t.image;
          } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005, true);
                                        }
          }
          break;
        case GREATER_EQUAL:
          t = jj_consume_token(GREATER_EQUAL);
          Expression();
                                         GreaterEqual jjtn006 = new GreaterEqual(JJTGREATEREQUAL);
                                         boolean jjtc006 = true;
                                         jjtree.openNodeScope(jjtn006);
          try {
                                         jjtree.closeNodeScope(jjtn006, true);
                                         jjtc006 = false;
                                        jjtn006.value = t.image;
          } finally {
                                         if (jjtc006) {
                                           jjtree.closeNodeScope(jjtn006, true);
                                         }
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comp_op");
    }
  }

  static final public void arg_list() throws ParseException {
    trace_call("arg_list");
    try {
                            /*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          nemp_arg_list();
          break;
        default:
          jj_la1[19] = jj_gen;
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;

        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("arg_list");
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    trace_call("nemp_arg_list");
    try {
      ID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        nemp_arg_list();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("nemp_arg_list");
    }
  }

  static final public String ID() throws ParseException {
    trace_call("ID");
    try {
                   /*@bgen(jjtree) ID */
                   ID jjtn000 = new ID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(ID);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.value = t.image; {if (true) return t.image;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ID");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(PLUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCalParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc00,0xc00,0xe000,0x20180000,0xe000,0x0,0x800000,0x8620000,0x8620000,0x24000000,0x80000000,0x20000000,0x20180000,0x20000000,0x20180000,0x0,0x20180000,0x0,0x0,0x0,0x800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1401,0x0,0x1000,0x0,0x1000,0x1000,0x0,0x1,0x0,0x1401,0x0,0x1401,0x2,0x1401,0xc,0x3f0,0x1000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CCalParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCalParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CCalParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CCalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CCalParser(CCalParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CCalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
